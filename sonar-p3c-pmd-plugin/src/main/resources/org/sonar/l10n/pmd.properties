rule.pmd.ClassNamingShouldBeCamelRule.name=类名使用UpperCamelCase风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO / DAO等
rule.pmd.AbstractClassShouldStartWithAbstractNamingRule.name=抽象类命名使用Abstract或Base开头
rule.pmd.ExceptionClassShouldEndWithExceptionRule.name=异常类命名使用Exception结尾
rule.pmd.TestClassShouldEndWithTestNamingRule.name=测试类命名以它要测试的类的名称开始，以Test结尾
rule.pmd.LowerCamelCaseVariableNamingRule.name=方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase，必须遵从驼峰形式
rule.pmd.AvoidStartWithDollarAndUnderLineNamingRule.name=所有编程相关的命名均不能以下划线或美元符号开始
rule.pmd.ConstantFieldShouldBeUpperCaseRule.name=常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长
rule.pmd.ServiceOrDaoClassShouldEndWithImplRule.name=对于Service和DAO类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别
rule.pmd.PackageNamingRule.name=包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式
rule.pmd.BooleanPropertyShouldNotStartWithIsRule.name=POJO类中的任何布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误
rule.pmd.ArrayNamingShouldHaveBracketRule.name=中括号是数组类型的一部分，数组定义如下：String[] args

rule.pmd.UpperEllRule.name=long或者Long初始赋值时，必须使用大写的L，不能是小写的l，小写容易跟数字1混淆，造成误解
rule.pmd.UndefineMagicConstantRule.name=不允许出现任何魔法值（即未经定义的常量）直接出现在代码中

rule.pmd.EqualsAvoidNullRule.name=Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals
rule.pmd.WrapperTypeEqualityRule.name=所有的包装类对象之间值的比较，全部使用equals方法比较
rule.pmd.PojoMustUsePrimitiveFieldRule.name=关于基本数据类型与包装数据类型的使用标准如下：1） 所有的POJO类属性使用包装数据类型
rule.pmd.PojoNoDefaultValueRule.name=定义DO/DTO/VO等POJO类时，不要加任何属性默认值
rule.pmd.ConstructorNoBusinessLogicRule.name=构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在init方法中
rule.pmd.PojoMustOverrideToStringRule.name=POJO类必须写toString方法。使用工具类source> generate toString时，如果继承了另一个POJO类，注意在前面加一下super.toString

rule.pmd.ClassCastExceptionWithToArrayRule.name=使用集合转数组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全一样的数组，大小就是list.size()
rule.pmd.UnsupportedExceptionWithModifyAsListRule.name=使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常
rule.pmd.ClassCastExceptionWithSubListToArrayListRule.name=ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常
rule.pmd.ConcurrentExceptionWithModifyOriginSubListRule.name=在subList场景中，高度注意对原列表的修改，会导致子列表的遍历、增加、删除均产生ConcurrentModificationException异常
rule.pmd.DontModifyInForeachCircleRule.name=不要在foreach循环里进行元素的remove/add操作，remove元素请使用Iterator方式

rule.pmd.ThreadPoolCreationRule.name=线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险
rule.pmd.AvoidUseTimerRule.name=多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用ScheduledExecutorService则没有这个问题
rule.pmd.AvoidManuallyCreateThreadRule.name=线程资源必须通过线程池提供，不允许在应用中自行显式创建线程
rule.pmd.ThreadShouldSetNameRule.name=创建线程或线程池时请指定有意义的线程名称，方便出错时回溯
rule.pmd.AvoidCallStaticSimpleDateFormatRule.name=SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类

rule.pmd.SwitchStatementRule.name=在一个switch块内，每个case要么通过break/return等来终止，要么注释说明程序将继续执行到哪一个case为止；在一个switch块内，都必须包含一个default语句并且放在最后，即使它什么代码也没有
rule.pmd.NeedBraceRule.name=在if/else/for/while/do语句中必须使用大括号，即使只有一行代码，避免使用下面的形式：if (condition) statements;

rule.pmd.CommentsMustBeJavadocFormatRule.name=类、类属性、类方法的注释必须使用javadoc规范，使用/**内容*/格式，不得使用//xxx方式
rule.pmd.AbstractMethodOrInterfaceMethodMustUseJavadocRule.name=所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能
rule.pmd.ClassMustHaveAuthorRule.name=所有的类都必须添加创建者和日期信息
rule.pmd.EnumConstantsMustHaveCommentRule.name=所有的枚举类型字段必须要有注释，说明每个数据项的用途
rule.pmd.AvoidCommentBehindStatement.name=方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释。注意与代码对齐

rule.pmd.AvoidPatternCompileInMethodRule.name=在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度
rule.pmd.AvoidApacheBeanUtilsCopyRule.name=避免用Apache Beanutils进行属性的copy
rule.pmd.AvoidNewDateGetTimeRule.name=获取当前毫秒数：System.currentTimeMillis(); 而不是new Date().getTime()
