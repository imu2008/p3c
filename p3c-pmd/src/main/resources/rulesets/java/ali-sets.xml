<?xml version="1.0"?>

<ruleset name="AlibabaJavaSets" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
 
	<rule name="ClassCastExceptionWithToArrayRule"
		message="使用集合转数组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全一样的数组，大小就是list.size()"
		class="com.alibaba.p3c.pmd.lang.java.rule.sets.ClassCastExceptionWithToArrayRule">
		<description>
        <![CDATA[
使用集合转数组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全一样的数组，大小就是list.size()。
        ]]>
        </description>
		<priority>2</priority>

		<example>
      <![CDATA[
以下代码中变量c为集合        
反例: 
   Integer[] a = (Integer [])c.toArray();
正例：
   Integer[] b = (Integer [])c.toArray(new Integer[c.size()]); 
       ]]>
      </example>
	</rule>

	<rule name="UnsupportedExceptionWithModifyAsListRule"
		message="使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常。"
		class="com.alibaba.p3c.pmd.lang.java.rule.sets.UnsupportedExceptionWithModifyAsListRule">
		<description>
            使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常。
        </description>
		<priority>2</priority>

		<example>
      <![CDATA[
数组转换成集合，使用的是适配器模式，后台数据仍然是数组，转换过来的集合不能对原始数组的元素个数有任何改动。
反例:
   List<String> t   = Arrays.asList("a","b","c"); 
   //warn
   t.add("22");
   //warn
   t.remove("22");
   //warn
   t.clear(); 
       ]]>
      </example>
	</rule>

    <rule name="ClassCastExceptionWithSubListToArrayListRule"
		message="ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常。"
		class="com.alibaba.p3c.pmd.lang.java.rule.sets.ClassCastExceptionWithSubListToArrayListRule">
		<description>
     <![CDATA[            
ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常。
      ]]>  
        </description>
		<priority>2</priority>

		<example>
      <![CDATA[
禁止强转，如果需要用到集合特性方法，请新建一个集合，然后置入sublist,new 集合(sublist结果)。
反例:
   List<String> list = new ArrayList<String>();
   list.add("22");
   //warn
   List<String> test = (ArrayList<String>) list.subList(0, 1);	 
正例:
   List<String> list2 = new ArrayList<String>(list.subList(0, 1));
       ]]>
      </example>
	</rule>
	 
	<rule name="ConcurrentExceptionWithModifyOriginSubListRule"
		message="在subList场景中，高度注意对原列表的修改，会导致子列表的遍历、增加、删除均产生ConcurrentModificationException异常。"
		class="com.alibaba.p3c.pmd.lang.java.rule.sets.ConcurrentExceptionWithModifyOriginSubListRule">
		<description>
        <![CDATA[           
在subList场景中，高度注意对原列表的修改，会导致子列表的遍历、增加、删除均产生ConcurrentModificationException异常。
        ]]> 
        </description>
		<priority>2</priority> 
		<example>
      <![CDATA[
如果对于原来集合有修改操作，那么不能用使用直接subList来返回子集合,new集合(原集合.subList(x, y))。   
反例:                
   List<String> originList = new ArrayList<String>();
   originList.add("22");
   List<String> subList = originList.subList(0, 1);
   //warn
   originList.add("22"); 
       ]]>
      </example>
	</rule>
	
	
	<rule name="DontModifyInForeachCircleRule"
		message="不要在foreach循环里进行元素的remove/add操作，remove元素请使用Iterator方式。"
		class="com.alibaba.p3c.pmd.lang.java.rule.sets.DontModifyInForeachCircleRule">
		<description>
		<![CDATA[   
不要在foreach循环里进行元素的remove/add操作，remove元素请使用Iterator方式。
        ]]> 
        </description>
		<priority>1</priority>

		<example>
      <![CDATA[ 
反例:   
   List<String> originList = new ArrayList<String>();
   originList.add("22");
   for (String item : originList) { 
      //warn
      list.add("bb");
   } 
 
       ]]>
      </example>
      
      <example>
       <![CDATA[ 
 正例:
   //返回对此set集合b中元素进行迭代的迭代器。返回元素的顺序并不是固定的。
   Iterator<Integer> it=b.iterator();		 
   while(it.hasNext()){                
      //每次调用 next 只能调用一次此方法。如果两次操作，则会抛出fatal错误。        
      Integer temp =  it.next();             
      //如果while(true)硬来，那么出错：java.util.NoSuchElementException 
      if(删除元素的条件){              
         it.remove();       
      } 
      //从迭代器指向的 collection 中移除迭代器返回的最后一个元素。
   }      
		 ]]>   
      </example>
	</rule>
</ruleset>
