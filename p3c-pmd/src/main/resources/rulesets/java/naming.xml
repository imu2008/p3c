<?xml version="1.0"?>

<ruleset name="Constants" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">


    <rule name="CamelClassNameRule"
          language="java"
          since="1.6"
          message="类名使用UpperCamelCase。 不能以下划线或美元符号打头，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / DTO / VO / DAO等。

正例：MarcoPolo / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion

反例：macroPolo / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            <![CDATA[
类名使用UpperCamelCase。 不能以下划线或美元符号打头，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / DTO / VO / DAO等。
            正例：MarcoPolo / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion
            反例：macroPolo / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion
                    ]]>
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//ClassOrInterfaceDeclaration
[not (matches(@Image,"^([A-Z][a-z0-9]+)+(DO|DTO|VO|DAO)?$"))]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
正例：MarcoPolo / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion
            反例：macroPolo / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion
]]>
        </example>
    </rule>

    <rule name="AbstractNaming"
          language="java"
          since="1.4"
          message="抽象类命名使用Abstract或Base开头"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            抽象类命名使用Abstract或Base开头
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//ClassOrInterfaceDeclaration
 [@Abstract='true' and @Interface='false']
 [not (matches(@Image,'^(Abstract|Base).*'))]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
public abstract class Foo { // should be AbstractFoo
}
]]>
        </example>
    </rule>

    <rule name="ExceptionNaming"
          language="java"
          since="1.6"
          message="异常类命名使用Exception结尾"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            异常类命名使用Exception结尾
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//ClassOrInterfaceDeclaration
[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'Exception')]]
[not (ends-with(@Image, 'Exception'))]
                    ]]>
                </value>
            </property>
        </properties>
    </rule>


    <rule name="TestClassNaming"
          language="java"
          since="1.6"
          message="测试类命名使用Test结尾"
          class="com.alibaba.p3c.pmd.lang.java.rule.naming.TestClassNameEndWithTestNamingRule">
        <description>
            测试类命名使用Test结尾
        </description>
        <priority>1</priority>
        <example>
            <![CDATA[
        public class TestClassName {
        @Test
        public void testCase() {

        }
    }
]]>
        </example>
    </rule>

    <rule name="VariableNaming"
          language="java"
          since="1.6"
          message="方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//VariableDeclaratorId
[not(ancestor::ForInit)]
[(../..[@Final='false'] and ../..[@Static = 'false'] )]
[not (matches(@Image, '^[a-z][a-z0-9]+([A-Z][a-z0-9]+)*(DO|DTO|VO|DAO)?$'))]
                    ]]>
                </value>
            </property>
        </properties>
    </rule>

    <rule name="AvoidStartWithDollarAndUnderLineNamingRule"
          language="java"
          since="1.6"
          message="所有编程相关的命名均不能以下划线或美元符号开始"
          class="com.alibaba.p3c.pmd.lang.java.rule.naming.AvoidStartWithDollarAndUnderLineNamingRule">
        <description>
            所有编程相关的命名均不能以下划线或美元符号开始
        </description>
        <priority>1</priority>
        <example>
            <![CDATA[
        public class AvoidStartWithDollarAndUnderLineNamingRule {
        private String $1;
    }
]]>
        </example>
    </rule>

    <rule name="ConstantFieldNameRule"
          language="java"
          since="1.6"
          message="常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长, Log除外"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长, Log除外
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//VariableDeclaratorId
[(ancestor::ClassOrInterfaceDeclaration)[@Interface='false']]
[../../Type/ReferenceType/ClassOrInterfaceType[@Image != 'Logger']]
[(../..[@Final='true'] and ../..[@Static = 'true'] )]
[not (matches(@Image, '^[A-Z][A-Z0-9]+(_[A-Z0-9]+)*[A-Z0-9]$'))]
                    ]]>
                </value>
            </property>
        </properties>
    </rule>

    <rule name="ServiceClassNameRule"
          language="java"
          since="1.6"
          message="对于Service和DAO类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            对于Service和DAO类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//ClassOrInterfaceDeclaration
[ .[@Interface='false'] and ./ImplementsList/ClassOrInterfaceType[ ends-with(@Image, 'Service') or ends-with(@Image, 'DAO')]]
[not(.[ ends-with(@Image, 'Impl')])]
                    ]]>
                </value>
            </property>
        </properties>
    </rule>

    <rule name="PackageNameRule"
          language="java"
          since="1.6"
          message="包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
//PackageDeclaration/Name
[not (matches(@Image, '^[a-z]+(\.[a-z][a-z0-9]*)*$'))]
                    ]]>
                </value>
            </property>
        </properties>
    </rule>

    <rule name="BooleanPropertyNamingRule"
          language="java"
          since="1.6"
          message="POJO类中的任何布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误"
          class="com.alibaba.p3c.pmd.lang.java.rule.naming.BooleanPropertyNamingRule">
        <description>
            POJO类中的任何布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误
        </description>
        <priority>2</priority>
        <example>
            <![CDATA[
    public class FooDAO{
    //POJO类的boolean属性不要加is
    private boolean issuccess;
}
]]>
        </example>
    </rule>

    <rule name="ArrayTypeStyleNamingRule"
          language="java"
          since="1.6"
          message="中括号是数组类型的一部分，数组定义如下：String[] args;"
          class="com.alibaba.p3c.pmd.lang.java.rule.naming.ArrayTypeStyleNamingRule">
        <description>
            中括号是数组类型的一部分，数组定义如下：String[] args;
        </description>
        <priority>2</priority>
        <example>
            <![CDATA[
  public class ArrayNamingTest{
    private String[] array1;
    //中括号应当是数组的一部分
    private String array2[];
    public void f(){
      String[] array3;
      //中括号应当是数组的一部分
      String array4[];
    }
}
]]>
        </example>
    </rule>

</ruleset>
